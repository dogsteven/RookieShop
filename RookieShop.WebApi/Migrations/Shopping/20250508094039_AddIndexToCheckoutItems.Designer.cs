// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RookieShop.Shopping.Infrastructure.Persistence;

#nullable disable

namespace RookieShop.WebApi.Migrations.Shopping
{
    [DbContext(typeof(ShoppingDbContext))]
    [Migration("20250508094039_AddIndexToCheckoutItems")]
    partial class AddIndexToCheckoutItems
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RookieShop.Shopping.Domain.Carts.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool>("IsClosedForCheckout")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Carts", "Shopping");
                });

            modelBuilder.Entity("RookieShop.Shopping.Domain.CheckoutSessions.CheckoutSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("SessionId");

                    b.Property<DateTime>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CheckoutSessions", "Shopping");
                });

            modelBuilder.Entity("RookieShop.Shopping.Domain.StockItems.StockItem", b =>
                {
                    b.Property<string>("Sku")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("Sku");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("AvailableQuantity");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("Price");

                    b.Property<int>("ReservedQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("ReservedQuantity");

                    b.Property<DateTime>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Sku");

                    b.ToTable("StockItems", "Shopping");
                });

            modelBuilder.Entity("RookieShop.Shopping.Domain.Carts.Cart", b =>
                {
                    b.OwnsMany("RookieShop.Shopping.Domain.Carts.CartItem", "_items", b1 =>
                        {
                            b1.Property<Guid>("CartId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Sku")
                                .HasMaxLength(16)
                                .HasColumnType("character varying(16)")
                                .HasColumnName("Sku");

                            b1.Property<Guid>("ImageId")
                                .HasColumnType("uuid")
                                .HasColumnName("ImageId");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric")
                                .HasColumnName("Price");

                            b1.Property<int>("Quantity")
                                .HasColumnType("integer")
                                .HasColumnName("Quantity");

                            b1.HasKey("CartId", "Sku");

                            b1.HasIndex("CartId");

                            b1.ToTable("CartItems", "Shopping");

                            b1.WithOwner()
                                .HasForeignKey("CartId");
                        });

                    b.Navigation("_items");
                });

            modelBuilder.Entity("RookieShop.Shopping.Domain.CheckoutSessions.CheckoutSession", b =>
                {
                    b.OwnsOne("RookieShop.Shared.Models.Address", "BillingAddress", b1 =>
                        {
                            b1.Property<Guid>("CheckoutSessionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("City");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Street");

                            b1.HasKey("CheckoutSessionId");

                            b1.ToTable("CheckoutSessionBillingAddresses", "Shopping");

                            b1.WithOwner()
                                .HasForeignKey("CheckoutSessionId");
                        });

                    b.OwnsOne("RookieShop.Shared.Models.Address", "ShippingAddress", b1 =>
                        {
                            b1.Property<Guid>("CheckoutSessionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("City");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Street");

                            b1.HasKey("CheckoutSessionId");

                            b1.ToTable("CheckoutSessionShippingAddresses", "Shopping");

                            b1.WithOwner()
                                .HasForeignKey("CheckoutSessionId");
                        });

                    b.OwnsMany("RookieShop.Shopping.Domain.Shared.CheckoutItem", "_items", b1 =>
                        {
                            b1.Property<Guid>("CheckoutSessionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Sku")
                                .HasMaxLength(16)
                                .HasColumnType("character varying(16)")
                                .HasColumnName("Sku");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric")
                                .HasColumnName("Price");

                            b1.Property<int>("Quantity")
                                .HasColumnType("integer")
                                .HasColumnName("Quantity");

                            b1.HasKey("CheckoutSessionId", "Sku");

                            b1.HasIndex("CheckoutSessionId");

                            b1.ToTable("CheckoutSessionCheckoutItems", "Shopping");

                            b1.WithOwner()
                                .HasForeignKey("CheckoutSessionId");
                        });

                    b.Navigation("BillingAddress");

                    b.Navigation("ShippingAddress");

                    b.Navigation("_items");
                });
#pragma warning restore 612, 618
        }
    }
}
