// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;
using RookieShop.ProductCatalog.Infrastructure.Persistence;

#nullable disable

namespace RookieShop.WebApi.Migrations.ProductCatalog
{
    [DbContext(typeof(ProductCatalogDbContextImpl))]
    [Migration("20250428041635_AddSemanticVectorForProduct")]
    partial class AddSemanticVectorForProduct
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RookieShop.ProductCatalog.Application.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories", "ProductCatalog");
                });

            modelBuilder.Entity("RookieShop.ProductCatalog.Application.Entities.Product", b =>
                {
                    b.Property<string>("Sku")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("Sku");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean")
                        .HasColumnName("IsFeatured");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("Price");

                    b.Property<Guid>("PrimaryImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("PrimaryImageId");

                    b.PrimitiveCollection<List<Guid>>("SupportingImageIds")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid[]")
                        .HasColumnName("SupportingImageIds")
                        .HasDefaultValueSql("array[]::uuid[]");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Sku");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", "ProductCatalog");
                });

            modelBuilder.Entity("RookieShop.ProductCatalog.Application.Entities.ProductRating", b =>
                {
                    b.Property<string>("ProductSku")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("Sku");

                    b.Property<int>("FiveCount")
                        .HasColumnType("integer")
                        .HasColumnName("FiveCount");

                    b.Property<int>("FourCount")
                        .HasColumnType("integer")
                        .HasColumnName("FourCount");

                    b.Property<int>("OneCount")
                        .HasColumnType("integer")
                        .HasColumnName("OneCount");

                    b.Property<double>("Score")
                        .HasColumnType("double precision")
                        .HasColumnName("Score");

                    b.Property<int>("ThreeCount")
                        .HasColumnType("integer")
                        .HasColumnName("ThreeCount");

                    b.Property<int>("TwoCount")
                        .HasColumnType("integer")
                        .HasColumnName("TwoCount");

                    b.Property<DateTime>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ProductSku");

                    b.ToTable("ProductRatings", "ProductCatalog");
                });

            modelBuilder.Entity("RookieShop.ProductCatalog.Application.Entities.ProductSemanticVector", b =>
                {
                    b.Property<string>("ProductSku")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("ProductSku");

                    b.Property<Vector>("SemanticVector")
                        .IsRequired()
                        .HasColumnType("vector")
                        .HasColumnName("SemanticVector");

                    b.HasKey("ProductSku");

                    b.ToTable("ProductSemanticVectors", "ProductCatalog");
                });

            modelBuilder.Entity("RookieShop.ProductCatalog.Application.Entities.Review", b =>
                {
                    b.Property<Guid>("WriterId")
                        .HasColumnType("uuid")
                        .HasColumnName("WriterId");

                    b.Property<string>("ProductSku")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("ProductSku");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Comment");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("Score");

                    b.Property<string>("WriterName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("WriterId", "ProductSku");

                    b.HasIndex("ProductSku");

                    b.ToTable("Reviews", "ProductCatalog");
                });

            modelBuilder.Entity("RookieShop.ProductCatalog.Application.Entities.ReviewReaction", b =>
                {
                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("Type");

                    b.Property<string>("ProductSku")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("ProductSku");

                    b.Property<Guid>("ReactorId")
                        .HasColumnType("uuid")
                        .HasColumnName("ReactorId");

                    b.Property<Guid>("WriterId")
                        .HasColumnType("uuid")
                        .HasColumnName("WriterId");

                    b.HasKey("Type");

                    b.HasIndex("WriterId", "ProductSku");

                    b.ToTable("ReviewReactions", "ProductCatalog");
                });

            modelBuilder.Entity("RookieShop.ProductCatalog.Application.Entities.Product", b =>
                {
                    b.HasOne("RookieShop.ProductCatalog.Application.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RookieShop.ProductCatalog.Application.Entities.ProductRating", b =>
                {
                    b.HasOne("RookieShop.ProductCatalog.Application.Entities.Product", null)
                        .WithOne("Rating")
                        .HasForeignKey("RookieShop.ProductCatalog.Application.Entities.ProductRating", "ProductSku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RookieShop.ProductCatalog.Application.Entities.ProductSemanticVector", b =>
                {
                    b.HasOne("RookieShop.ProductCatalog.Application.Entities.Product", null)
                        .WithOne("SemanticVector")
                        .HasForeignKey("RookieShop.ProductCatalog.Application.Entities.ProductSemanticVector", "ProductSku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RookieShop.ProductCatalog.Application.Entities.ReviewReaction", b =>
                {
                    b.HasOne("RookieShop.ProductCatalog.Application.Entities.Review", null)
                        .WithMany("Reactions")
                        .HasForeignKey("WriterId", "ProductSku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RookieShop.ProductCatalog.Application.Entities.Product", b =>
                {
                    b.Navigation("Rating")
                        .IsRequired();

                    b.Navigation("SemanticVector")
                        .IsRequired();
                });

            modelBuilder.Entity("RookieShop.ProductCatalog.Application.Entities.Review", b =>
                {
                    b.Navigation("Reactions");
                });
#pragma warning restore 612, 618
        }
    }
}
