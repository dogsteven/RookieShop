@using RookieShop.FrontStore.Modules.ImageGallery
@model RookieShop.FrontStore.Models.Shared.Components.ProductCardViewModel
@inject ImageGalleryUrlResolver ImageGalleryUrlResolver

<div class="flex flex-col justify-between rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800">
  <div>
    <div class="w-full aspect-square">
      <a href="/Products/ProductDetails/@Model.Product.Sku">
        <img class="mx-auto h-full dark:hidden aspect-square object-cover" src="@ImageGalleryUrlResolver.ResolveImageUrl(Model.Product.PrimaryImageId)" alt="@Model.Product.Name"/>
        <img class="mx-auto hidden h-full dark:block aspect-square object-cover" src="@ImageGalleryUrlResolver.ResolveImageUrl(Model.Product.PrimaryImageId)" alt="@Model.Product.Name"/></a>
    </div>

    <div class="pt-6 h-fit flex flex-col justify-between">
      <a href="/Products/ProductDetails/@Model.Product.Sku" class="text-lg font-semibold leading-tight text-gray-900 hover:underline dark:text-white">@Model.Product.Name</a>

      <div class="mt-2 flex items-center gap-2">
        @await Component.InvokeAsync("RatingStars", new { stars = (int)Math.Round(Model.Product.Rating.Score), isBig = false })

        <p class="text-sm font-medium text-gray-900 dark:text-white">@Model.Product.Rating.Score</p>
        <p class="text-sm font-medium text-gray-500 dark:text-gray-400">(@Model.Product.Rating.Count)</p>
      </div>

      <div class="mt-2 flex items-center gap-2">
        <p class="text-sm font-medium text-gray-900 dark:text-white">Availability:</p>
        <p class="text-sm font-medium text-gray-500 dark:text-gray-400">@Model.Product.AvailableQuantity units</p>
      </div>

      @if (Model.Product.IsFeatured && Model.ShowFeaturedTag)
      {
        <ul class="mt-2 flex items-center gap-4">
          <li class="flex items-center gap-2">
            <svg class="h-4 w-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
              <path
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="m7.171 12.906-2.153 6.411 2.672-.89 1.568 2.34 1.825-5.183m5.73-2.678 2.154 6.411-2.673-.89-1.568 2.34-1.825-5.183M9.165 4.3c.58.068 1.153-.17 1.515-.628a1.681 1.681 0 0 1 2.64 0 1.68 1.68 0 0 0 1.515.628 1.681 1.681 0 0 1 1.866 1.866c-.068.58.17 1.154.628 1.516a1.681 1.681 0 0 1 0 2.639 1.682 1.682 0 0 0-.628 1.515 1.681 1.681 0 0 1-1.866 1.866 1.681 1.681 0 0 0-1.516.628 1.681 1.681 0 0 1-2.639 0 1.681 1.681 0 0 0-1.515-.628 1.681 1.681 0 0 1-1.867-1.866 1.681 1.681 0 0 0-.627-1.515 1.681 1.681 0 0 1 0-2.64c.458-.361.696-.935.627-1.515A1.681 1.681 0 0 1 9.165 4.3ZM14 9a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z"/>
            </svg>
            <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Best Seller</p>
          </li>
        </ul>
      }
    </div>
  </div>

  <div class="mt-6 flex items-center justify-between gap-4">
    <p class="text-lg font-extrabold leading-tight text-gray-900 dark:text-white">$@Model.Product.Price.ToString("F2")</p>

    @await Component.InvokeAsync("AddToCartButton", new { product = Model.Product, redirectUrl = $"/Products/ProductDetails/{Model.Product.Sku}" })
  </div>
</div>